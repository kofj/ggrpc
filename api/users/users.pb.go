// Code generated by protoc-gen-go.
// source: users.proto
// DO NOT EDIT!

/*
Package users is a generated protocol buffer package.

It is generated from these files:
	users.proto

It has these top-level messages:
	UserFilter
	UserInfo
	CreateUserState
*/
package users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserFilter struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserFilter) Reset()                    { *m = UserFilter{} }
func (m *UserFilter) String() string            { return proto.CompactTextString(m) }
func (*UserFilter) ProtoMessage()               {}
func (*UserFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UserInfo struct {
	Id     int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email  string            `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phones []*UserInfo_Phone `protobuf:"bytes,4,rep,name=Phones" json:"Phones,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserInfo) GetPhones() []*UserInfo_Phone {
	if m != nil {
		return m.Phones
	}
	return nil
}

type UserInfo_Phone struct {
	Number   string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	IsOffice bool   `protobuf:"varint,2,opt,name=isOffice" json:"isOffice,omitempty"`
}

func (m *UserInfo_Phone) Reset()                    { *m = UserInfo_Phone{} }
func (m *UserInfo_Phone) String() string            { return proto.CompactTextString(m) }
func (*UserInfo_Phone) ProtoMessage()               {}
func (*UserInfo_Phone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type CreateUserState struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *CreateUserState) Reset()                    { *m = CreateUserState{} }
func (m *CreateUserState) String() string            { return proto.CompactTextString(m) }
func (*CreateUserState) ProtoMessage()               {}
func (*CreateUserState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*UserFilter)(nil), "users.UserFilter")
	proto.RegisterType((*UserInfo)(nil), "users.UserInfo")
	proto.RegisterType((*UserInfo_Phone)(nil), "users.UserInfo.Phone")
	proto.RegisterType((*CreateUserState)(nil), "users.CreateUserState")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for User service

type UserClient interface {
	// Get user info with filter.
	GetUser(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (User_GetUserClient, error)
	// Create a new user.
	CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*CreateUserState, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUser(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (User_GetUserClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_User_serviceDesc.Streams[0], c.cc, "/users.User/GetUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_GetUserClient interface {
	Recv() (*UserInfo, error)
	grpc.ClientStream
}

type userGetUserClient struct {
	grpc.ClientStream
}

func (x *userGetUserClient) Recv() (*UserInfo, error) {
	m := new(UserInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*CreateUserState, error) {
	out := new(CreateUserState)
	err := grpc.Invoke(ctx, "/users.User/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	// Get user info with filter.
	GetUser(*UserFilter, User_GetUserServer) error
	// Create a new user.
	CreateUser(context.Context, *UserInfo) (*CreateUserState, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).GetUser(m, &userGetUserServer{stream})
}

type User_GetUserServer interface {
	Send(*UserInfo) error
	grpc.ServerStream
}

type userGetUserServer struct {
	grpc.ServerStream
}

func (x *userGetUserServer) Send(m *UserInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.User/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUser",
			Handler:       _User_GetUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("users.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x69, 0x92, 0xa6, 0x53, 0xb0, 0x38, 0x68, 0x59, 0x82, 0x87, 0xb0, 0xa7, 0x5c,
	0x0c, 0x5a, 0x0f, 0x1e, 0x7a, 0x14, 0x14, 0x4f, 0xca, 0x8a, 0x0f, 0x90, 0xa6, 0x13, 0x5c, 0x68,
	0x12, 0xd9, 0xdd, 0xbc, 0x97, 0x8f, 0x28, 0xd9, 0xa4, 0x2a, 0xeb, 0x6d, 0xfe, 0xf9, 0x67, 0xe6,
	0xff, 0xd8, 0x85, 0x55, 0x6f, 0x48, 0x9b, 0xe2, 0x53, 0x77, 0xb6, 0xc3, 0xc8, 0x09, 0x71, 0x05,
	0xf0, 0x6e, 0x48, 0x3f, 0xaa, 0xa3, 0x25, 0x8d, 0x67, 0x10, 0xa8, 0x03, 0x67, 0x19, 0xcb, 0x23,
	0x19, 0xa8, 0x83, 0xf8, 0x62, 0x90, 0x0c, 0xf6, 0x73, 0x5b, 0x77, 0xbe, 0x89, 0x08, 0x61, 0x5b,
	0x36, 0xc4, 0x83, 0x8c, 0xe5, 0x4b, 0xe9, 0x6a, 0xbc, 0x80, 0x88, 0x9a, 0x52, 0x1d, 0xf9, 0xdc,
	0x35, 0x47, 0x81, 0xd7, 0x10, 0xbf, 0x7e, 0x74, 0x2d, 0x19, 0x1e, 0x66, 0xf3, 0x7c, 0xb5, 0xbd,
	0x2c, 0x46, 0x92, 0xd3, 0xe9, 0xc2, 0xb9, 0x72, 0x1a, 0x4a, 0x77, 0x10, 0xb9, 0x0a, 0x37, 0x10,
	0xb7, 0x7d, 0xb3, 0x27, 0xed, 0x52, 0x97, 0x72, 0x52, 0x98, 0x42, 0xa2, 0xcc, 0x4b, 0x5d, 0xab,
	0x6a, 0x4c, 0x4f, 0xe4, 0x8f, 0x16, 0x3b, 0x58, 0x3f, 0x68, 0x2a, 0x2d, 0x0d, 0xc7, 0xdf, 0x6c,
	0x69, 0xe9, 0x1f, 0x38, 0x87, 0x85, 0xe9, 0xab, 0x8a, 0x8c, 0x99, 0xb6, 0x4f, 0x72, 0xab, 0x21,
	0x1c, 0xd6, 0xf0, 0x16, 0x16, 0x4f, 0x64, 0x5d, 0x79, 0xfe, 0x87, 0x75, 0x7c, 0xa5, 0x74, 0xed,
	0xe1, 0x8b, 0xd9, 0x0d, 0xc3, 0x7b, 0x80, 0xdf, 0x5c, 0xf4, 0x47, 0xd2, 0xcd, 0xd4, 0xf0, 0xd8,
	0xc4, 0x6c, 0x1f, 0xbb, 0xff, 0xb8, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x18, 0x87, 0xf5, 0xcf,
	0x9e, 0x01, 0x00, 0x00,
}
